# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class ProfilesAgent(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=255)
    purpose = models.TextField()
    prompt = models.TextField()
    llm = models.ForeignKey('ProfilesLlmconfig', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'profiles_agent'


class ProfilesAgentTools(models.Model):
    id = models.BigAutoField(primary_key=True)
    agent = models.ForeignKey(ProfilesAgent, models.DO_NOTHING)
    tool = models.ForeignKey('ProfilesTool', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'profiles_agent_tools'
        unique_together = (('agent', 'tool'),)


class ProfilesBusinessprofile(models.Model):
    client_id = models.CharField(primary_key=True, max_length=255)
    business_type = models.TextField(blank=True, null=True)
    business_description = models.TextField(blank=True, null=True)
    contact_info = models.TextField(blank=True, null=True)
    common_business_expenses = models.TextField(blank=True, null=True)
    custom_6a_expense_categories = models.TextField(db_column='custom_6A_expense_categories', blank=True, null=True)  # Field name made lowercase.
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    common_expenses = models.JSONField(blank=True, null=True)
    custom_categories = models.JSONField(blank=True, null=True)
    industry_keywords = models.JSONField(blank=True, null=True)
    category_patterns = models.JSONField(blank=True, null=True)
    profile_data = models.JSONField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profiles_businessprofile'


class ProfilesClientexpensecategory(models.Model):
    id = models.BigAutoField(primary_key=True)
    category_name = models.CharField(max_length=255)
    category_type = models.CharField(max_length=50)
    description = models.TextField(blank=True, null=True)
    tax_year = models.IntegerField()
    worksheet = models.CharField(max_length=50)
    parent_category = models.CharField(max_length=255, blank=True, null=True)
    line_number = models.CharField(max_length=50, blank=True, null=True)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    client = models.ForeignKey(ProfilesBusinessprofile, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'profiles_clientexpensecategory'
        unique_together = (('client', 'category_name', 'tax_year'),)


class ProfilesIrsexpensecategory(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=255)
    description = models.TextField()
    line_number = models.CharField(max_length=50)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    worksheet = models.ForeignKey('ProfilesIrsworksheet', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'profiles_irsexpensecategory'
        unique_together = (('worksheet', 'name'),)


class ProfilesIrsworksheet(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'profiles_irsworksheet'


class ProfilesLlmconfig(models.Model):
    id = models.BigAutoField(primary_key=True)
    provider = models.CharField(max_length=255)
    model = models.CharField(unique=True, max_length=255)
    url = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profiles_llmconfig'


class ProfilesNormalizedvendordata(models.Model):
    id = models.BigAutoField(primary_key=True)
    normalized_name = models.CharField(max_length=255)
    normalized_description = models.TextField(blank=True, null=True)
    justification = models.TextField(blank=True, null=True)
    confidence = models.DecimalField(max_digits=5, decimal_places=2)
    transaction = models.OneToOneField('ProfilesTransaction', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'profiles_normalizedvendordata'


class ProfilesTool(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(unique=True, max_length=255)
    description = models.TextField(blank=True, null=True)
    module_path = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'profiles_tool'


class ProfilesTransaction(models.Model):
    id = models.BigAutoField(primary_key=True)
    transaction_date = models.DateField()
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()
    category = models.CharField(max_length=255, blank=True, null=True)
    parsed_data = models.JSONField()
    file_path = models.CharField(max_length=255, blank=True, null=True)
    source = models.CharField(max_length=255, blank=True, null=True)
    transaction_type = models.CharField(max_length=50, blank=True, null=True)
    normalized_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    statement_start_date = models.DateField(blank=True, null=True)
    statement_end_date = models.DateField(blank=True, null=True)
    account_number = models.CharField(max_length=50, blank=True, null=True)
    transaction_id = models.IntegerField(unique=True, blank=True, null=True)
    client = models.ForeignKey(ProfilesBusinessprofile, models.DO_NOTHING)
    normalized_description = models.TextField(blank=True, null=True)
    payee = models.CharField(max_length=255, blank=True, null=True)
    confidence = models.CharField(max_length=50, blank=True, null=True)
    reasoning = models.TextField(blank=True, null=True)
    business_context = models.TextField(blank=True, null=True)
    questions = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profiles_transaction'
        unique_together = (('client', 'transaction_id'),)


class ProfilesTransactionclassification(models.Model):
    id = models.BigAutoField(primary_key=True)
    classification_type = models.CharField(max_length=50)
    worksheet = models.CharField(max_length=50)
    confidence = models.CharField(max_length=20)
    reasoning = models.TextField()
    created_by = models.CharField(max_length=100)
    created_at = models.DateTimeField()
    is_active = models.BooleanField()
    transaction = models.ForeignKey(ProfilesTransaction, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'profiles_transactionclassification'

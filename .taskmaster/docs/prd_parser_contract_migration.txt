# PRD: Migration to Canonical Pydantic Parser Output Contract

## Motivation
- Guarantee a reliable, minimal, and extensible schema for all modularized parser outputs.
- Enable strict schema enforcement for ingestion, 3rd parties, and downstream consumers.
- Improve maintainability, type safety, and error handling using Pydantic models.
- Enforce separation of concerns: transaction data only in main output, all context/statement-level metadata returned separately.

## Goals
- Refactor all modularized parsers to output only transaction data fields in a list of TransactionRecord objects.
- Move all statement-level/contextual info to a StatementMetadata object.
- Return a ParserOutput object from each parser, validated by Pydantic.
- Remove all context fields (e.g., statement_file, client, file_path) from per-transaction output.
- Use the `extra` field for parser/bank-specific or experimental fields.
- Update ingestion and downstream systems to consume the new contract.
- Document the migration and update all relevant developer and system documentation.

## Requirements
- All modularized parsers must:
  - Output a list of TransactionRecord objects (raw transaction data only)
  - Output a StatementMetadata object (statement-level metadata, all fields optional)
  - Return a ParserOutput object (transactions, metadata, schema_version, errors, warnings)
  - Validate output with Pydantic before returning
  - Remove all context fields from per-transaction output
  - Use `extra` for parser/bank-specific fields
- Ingestion pipeline must:
  - Accept ParserOutput structure
  - Attach metadata to transactions as needed
  - Handle errors/warnings as provided
- Documentation must:
  - Be updated to reflect new contract
  - Include migration notes and rationale

## Deliverables
- Refactored modularized parsers (CapitalOneCSV, WellsFargoBankCSV, WellsFargoVisa, FirstRepublicBank, ChaseChecking, etc.)
- Canonical Pydantic models in a shared location (parsers_core/models.py)
- Updated ingestion logic to consume ParserOutput
- Updated developer documentation and memory bank
- Migration/test plan and validation scripts

## Migration Plan
1. Create canonical Pydantic models and document contract
2. Refactor each modularized parser to output ParserOutput
3. Update ingestion pipeline to consume new structure
4. Update and validate all downstream consumers
5. Update documentation and memory bank
6. Test all parsers and ingestion end-to-end
7. Communicate changes to all stakeholders

## Success Criteria
- All modularized parsers pass validation with canonical models
- Ingestion and downstream systems work with new contract
- No context fields in per-transaction output
- Documentation and memory bank are up to date
- Stakeholders confirm successful migration 
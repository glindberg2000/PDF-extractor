# Task ID: 19
# Title: Handle Credit and Debit Amounts
# Status: done
# Dependencies: 16
# Priority: high
# Description: Implement logic to correctly handle credit and debit amounts, ensuring debits are negative and credits are positive.
# Details:
Enhance the transaction parsing to correctly handle credit and debit amounts. Ensure that debits are represented as negative values and credits as positive values. Handle different formats for indicating credits and debits (e.g., negative signs, CR/DR indicators, or column positions).

```python
def parse_amount(self, amount_str, is_credit_column=False):
    """Parse and normalize transaction amount"""
    # Remove currency symbols and commas
    amount_str = amount_str.replace('$', '').replace(',', '').strip()
    
    # Check for credit/debit indicators
    is_credit = False
    if 'CR' in amount_str.upper():
        is_credit = True
        amount_str = amount_str.upper().replace('CR', '').strip()
    elif 'DR' in amount_str.upper():
        is_credit = False
        amount_str = amount_str.upper().replace('DR', '').strip()
    elif amount_str.startswith('+'):
        is_credit = True
        amount_str = amount_str[1:].strip()
    elif amount_str.startswith('-'):
        is_credit = False
        amount_str = amount_str[1:].strip()
    elif is_credit_column:  # If this amount is from a dedicated credit column
        is_credit = True
    
    try:
        amount = float(amount_str)
        # Apply sign based on credit/debit status
        if not is_credit:
            amount = -amount
        return amount
    except ValueError:
        raise ValueError(f"Could not parse amount: {amount_str}")

# Update the transaction extraction to use this method
def extract_transactions(self, text_content, file_path):
    # Get existing code from previous tasks
    # ...
    
    # When parsing the transaction line, use parse_amount
    # Replace the amount parsing code with:
    try:
        amount = self.parse_amount(amount_str)
    except ValueError:
        print(f"Warning: Could not parse amount '{amount_str}' in line: {line}")
        current_transaction = None
        continue
    
    # Rest of the method remains the same
    # ...
```

# Test Strategy:
Test with transactions having various amount formats. Verify that debits are correctly represented as negative values and credits as positive values. Check handling of different credit/debit indicators (-, +, CR, DR). Test with amounts in different positions or columns.

# Task ID: 22
# Title: Create Transformation Map for Normalizer
# Status: done
# Dependencies: 20
# Priority: medium
# Description: Create or update the transformation map for 'capitalone_visa_print' to ensure compatibility with the transaction normalizer.
# Details:
Create or update the transformation map configuration for the 'capitalone_visa_print' source type. This map will be used by the transaction normalizer to standardize field names and formats. Ensure the map correctly maps the parser's output fields to the normalized schema.

```python
# Example transformation map configuration (format may vary based on existing system)
# This might be added to a JSON/YAML config file or a Python configuration module

'''
CapitalOne Visa Print transformation map:

transformation_maps = {
    # ... existing maps ...
    
    'capitalone_visa_print': {
        'date_format': '%Y-%m-%d',  # Already normalized by our parser
        'field_mapping': {
            'transaction_date': 'date',
            'description': 'description',
            'amount': 'amount',
            'source': 'source',
            'file_path': 'file_path',
            'account_number': 'account_number',
            'statement_end_date': 'statement_date'
        },
        'amount_multiplier': 1.0,  # No need to flip sign as we already handle this
        'date_fields': ['transaction_date', 'statement_end_date'],
        'required_fields': ['transaction_date', 'description', 'amount']
    }
}
'''

# Implementation depends on how transformation maps are stored in the system
def register_transformation_map(self):
    """Register the transformation map for this parser"""
    from dataextractai.config import transformation_maps
    
    # Check if the map already exists
    if 'capitalone_visa_print' not in transformation_maps:
        # Add the new map
        transformation_maps['capitalone_visa_print'] = {
            'date_format': '%Y-%m-%d',
            'field_mapping': {
                'transaction_date': 'date',
                'description': 'description',
                'amount': 'amount',
                'source': 'source',
                'file_path': 'file_path',
                'account_number': 'account_number',
                'statement_end_date': 'statement_date'
            },
            'amount_multiplier': 1.0,
            'date_fields': ['transaction_date', 'statement_end_date'],
            'required_fields': ['transaction_date', 'description', 'amount']
        }
        logger.info("Registered transformation map for 'capitalone_visa_print'")
    else:
        logger.info("Transformation map for 'capitalone_visa_print' already exists")
```

# Test Strategy:
Verify that the transformation map is correctly registered in the system. Test that the normalizer can use this map to process the parser's output. Check that field mappings work correctly for all required and optional fields.

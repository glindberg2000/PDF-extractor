# Task ID: 10
# Title: Implement Main Parser and JSON Output
# Status: pending
# Dependencies: 3, 4, 6, 7, 8, 9
# Priority: high
# Description: Create the main parser class that orchestrates the extraction process and produces structured JSON output.
# Details:
Implement the main parser class that coordinates all the extraction components and produces the structured JSON output according to the specified schema. This class will implement the parse method required by the PDF-Extractor interface.

```python
# parser.py
from .extractors.toc_extractor import TOCExtractor
from .extractors.section_extractor import SectionExtractor
from .extractors.form_specific_extractors import FormExtractorFactory
from .extractors.document_extractor import DocumentReferenceExtractor
from .utils.ocr import extract_text_from_pdf

class TaxOrganizerParser:
    @staticmethod
    def can_parse(pdf_path):
        # Implementation from Task 9
        pass
        
    def parse(self, pdf_path):
        """Parse tax organizer PDF and return structured data"""
        # Extract text from PDF
        full_text = extract_text_from_pdf(pdf_path)
        
        # Initialize result structure
        result = {
            "organizer_sections": [],
            "documents": [],
            "unclassified_fields": [],
            "metadata": {"errors": []}
        }
        
        try:
            # Extract TOC
            toc_extractor = TOCExtractor(full_text)
            toc_mapping = toc_extractor.extract_toc()
            
            # Extract sections
            section_extractor = SectionExtractor(full_text, toc_mapping)
            sections = section_extractor.extract_sections()
            
            # Process each section
            for section in sections:
                try:
                    # Get appropriate extractor for this section
                    extractor = FormExtractorFactory.get_extractor(
                        section["name"], section["content"]
                    )
                    
                    # Extract fields
                    section["fields"] = extractor.extract_fields()
                    
                    # Add to result
                    result["organizer_sections"].append({
                        "name": section["name"],
                        "page_number": section["page_number"],
                        "fields": section["fields"],
                        "complete": len(section["fields"]) > 0
                    })
                except Exception as e:
                    # Log error but continue with other sections
                    result["metadata"]["errors"].append({
                        "section": section["name"],
                        "page": section["page_number"],
                        "field": None,
                        "reason": str(e)
                    })
            
            # Extract document references
            doc_extractor = DocumentReferenceExtractor(full_text)
            result["documents"] = doc_extractor.extract_document_references()
            
            # Extract unclassified fields (text not in any section)
            # This is a simplified approach
            result["unclassified_fields"] = self._extract_unclassified_fields(full_text, sections)
            
        except Exception as e:
            # Log general parsing error
            result["metadata"]["errors"].append({
                "section": "general",
                "page": None,
                "field": None,
                "reason": f"General parsing error: {str(e)}"
            })
            
        return result
        
    def _extract_unclassified_fields(self, full_text, sections):
        """Extract text that doesn't belong to any section"""
        # Simplified implementation
        unclassified = []
        
        # Find notes or instructions that might be important
        note_pattern = r"(?i)note:([^\n.]+)[.\n]"
        for match in re.finditer(note_pattern, full_text):
            unclassified.append({
                "text": "Note: " + match.group(1).strip(),
                "page_number": None  # Would need more context to determine page
            })
            
        return unclassified
```

# Test Strategy:
Test with complete tax organizer PDFs. Verify that the parser correctly orchestrates the extraction process and produces valid JSON output according to the specified schema. Test error handling by introducing various failure scenarios. Verify that partial extraction works when some sections fail.

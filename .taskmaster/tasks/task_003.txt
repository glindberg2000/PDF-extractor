# Task ID: 3
# Title: Implement Table of Contents (TOC) Extractor
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create a parser to extract the Table of Contents from tax organizer PDFs and map section labels/codes to page numbers.
# Details:
Implement a TOC extractor that identifies the table of contents in tax organizer PDFs and creates a mapping between section labels/codes and their corresponding page numbers. This is a critical foundation for the rest of the parsing logic.

```python
# extractors/toc_extractor.py
import re

class TOCExtractor:
    def __init__(self, pdf_text):
        self.pdf_text = pdf_text
        self.pages = self._split_into_pages(pdf_text)
        
    def _split_into_pages(self, text):
        # Logic to split text into pages based on page markers
        pass
        
    def extract_toc(self):
        """Extract Table of Contents and return section to page mapping"""
        toc_page = self._find_toc_page()
        if not toc_page:
            return {}
            
        section_mapping = {}
        # Use regex to find patterns like "Section Name...........15"
        pattern = r"([\w\s]+)\.*\s*(\d+)"
        matches = re.findall(pattern, toc_page)
        
        for section, page in matches:
            section_mapping[section.strip()] = int(page)
            
        return section_mapping
        
    def _find_toc_page(self):
        """Find the page containing the Table of Contents"""
        # Look for pages with titles like "Table of Contents", "Contents", etc.
        for page in self.pages:
            if re.search(r"(?i)table\s+of\s+contents|contents", page):
                return page
        return None
```

# Test Strategy:
Test with sample tax organizer PDFs containing TOCs. Verify that the extractor correctly identifies the TOC page and extracts section names and page numbers. Test with different TOC formats and layouts. Create test cases for edge cases like missing TOC or unusual formatting.

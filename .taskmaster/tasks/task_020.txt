# Task ID: 20
# Title: Implement CSV Output Generation
# Status: done
# Dependencies: 16, 17, 18, 19
# Priority: high
# Description: Implement functionality to normalize and save extracted transactions to a CSV file with the required column structure.
# Details:
Implement the `normalize_and_save` method to convert the extracted transactions to a pandas DataFrame and save it as a CSV file. Ensure all required columns are present and properly formatted. Use the standardize_column_names utility to normalize column names.

```python
def normalize_and_save(self, transactions, output_file):
    """Normalize and save transactions to CSV"""
    if not transactions:
        print(f"Warning: No transactions found to save to {output_file}")
        return
    
    # Convert to DataFrame
    df = pd.DataFrame(transactions)
    
    # Ensure all required columns are present
    required_columns = ['transaction_date', 'description', 'amount', 'source', 'file_path']
    for col in required_columns:
        if col not in df.columns:
            if col == 'source':
                df[col] = self.source_type
            elif col == 'file_path':
                df[col] = df.get('file_path', '')
            else:
                raise ValueError(f"Required column '{col}' is missing from the extracted data")
    
    # Standardize column names
    df.columns = standardize_column_names(df.columns)
    
    # Ensure directory exists
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    # Save to CSV
    df.to_csv(output_file, index=False)
    print(f"Saved {len(df)} transactions to {output_file}")
    return df

# Update the main parsing method to use this
def parse(self, input_files=None, output_file=None):
    """Parse CapitalOne Visa print statements and save to CSV"""
    if input_files is None:
        input_files = self.get_input_files()
    
    if output_file is None:
        output_file = os.path.join(self.output_path, 'capitalone_visa_print_output.csv')
    
    all_transactions = []
    for file_path in input_files:
        try:
            transactions = self.parse_file(file_path)
            all_transactions.extend(transactions)
        except Exception as e:
            print(f"Error processing file {file_path}: {str(e)}")
    
    return self.normalize_and_save(all_transactions, output_file)
```

# Test Strategy:
Test with a set of extracted transactions. Verify that the CSV file is correctly generated with all required columns. Check that column names are properly standardized. Validate that the output matches the expected format with the correct data types.
